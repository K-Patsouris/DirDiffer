#pragma once
#include "string_defs.h"


namespace diff {
	
	constexpr string_view sample_config_contents = 
		"// Sample DirDiffer config file to demonstrate the syntax.\r\n"
		"// The syntax is almost identical to classic INI syntax, except with angle brackets (<>) instead of brackets ([]) for category tags, and double slashes (//) instead of semicolon (;) for comments.\r\n"
		"// Angle brackets are used instead of brackets because brackets are valid filesystem path characters, which could make disambiguation from category tags impossible in some cases.\r\n"
		"// Double slashes are used instead of semicolon for the same reason.\r\n"
		"// Additionally, the format is simplified from key-value pairs under categories, to simply values under categories. The equals sign (=) is not special.\r\n"
		"\r\n"
		"// Same as with INI syntax, comments must occupy entire lines. Trailing comments are not allowed.\r\n"
		"// // Removing the initial \"//\" from this line leaves it as a comment line that is ignored. Leading whitespace is ignored.\r\n"
		"// asd // Removing the initial \"//\" from this line leaves it as a line that will be parsed normally (and likely result in a garbage value).\r\n"
		"\r\n"
		"// Leading and trailing whitespace is ignored.\r\n"
		"// Empty lines are ignored.\r\n"
		"// Comments ignored.\r\n"
		"// Newline is significant.\r\n"
		"// Category tags are case-sensitive, but all values are case-insensitive.\r\n"
		"\r\n"
		"// Values are considered to belong to the category dictated by the last category tag preceding them. Example:\r\n"
		"\r\n"
		"// <category A>\r\n"
		"// <category B>\r\n"
		"// value1\r\n"
		"\r\n"
		"// When parsed, value1 will belong to category B.\r\n"
		"\r\n"
		"// Category tags may be repeated. Example:\r\n"
		"\r\n"
		"// <category A>\r\n"
		"// value1\r\n"
		"// <category B>\r\n"
		"// value2\r\n"
		"// <category A>\r\n"
		"// value3\r\n"
		"\r\n"
		"// When parsed, both value1 and value3 will belong to category A. The result will be equivalent to parsing:\r\n"
		"\r\n"
		"// <category A>\r\n"
		"// value1\r\n"
		"// value3\r\n"
		"// <category B>\r\n"
		"// value2\r\n"
		"\r\n"
		"// Values appearing before any category tag belong to no category and are ignored.\r\n"
		"\r\n"
		"// The following are example usages of each supported tag.\r\n"
		"\r\n"
		"// The root folder in which DirDiffer will look for files, recursively. At least one value must belong in this category or the parse fails.\r\n"
		"// If multiple values belong to this category, each subsequent value overwrites the previous, with the last being the eventual final value.\r\n"
		"// No actual verification that the path is valid is done during parse, but garbage value will simply have the program do nothing.\r\n"
		"// Trailing \"/\" and \"\\\" are ignored.\r\n"
		"<root>\r\n"
		"C:\\folder1\\folder2\r\n"
		"\r\n"
		"// File extensions that DirDiffer should look for. At least one value must belong in this category or the parse fails.\r\n"
		"// If multiple values belong to this category, they will all be extensions DirDiffer looks for.\r\n"
		"// No actual verification that the extensions are valid is done during parse, but garbage values will simply have no effect during execution.\r\n"
		"// Leading '.' is ignored.\r\n"
		"// Duplicates are ignored.\r\n"
		"<file extensions>\r\n"
		"html\r\n"
		".txt\r\n"
		"jpg\r\n"
		"\r\n"
		"// Folders whose files DirDiffer should ignore, regardless of extension. This category is optional and needs not be present if no folders should be excluded.\r\n"
		"// These folder paths should be relative to the root folder, not absolute.\r\n"
		"// The exclusion is recursive. If \"folderA\" is to be ignored, file \"folderA/folderB/file.txt\" will be ignored, even though it's not directly in \"folderA\".\r\n"
		"// No actual verification that the folders are valid is done during parse, but garbage values will simply have no effect during execution.\r\n"
		"// Leading and trailing \"/\" and \"\\\" are ignored.\r\n"
		"// Duplicates are ignored.\r\n"
		"<excluded folders>\r\n"
		"folder\\one\\\r\n"
		"\\folder 1\\trimmed 2\r\n"
		"\r\n"
		"// The minimum depth from the root folder a file should be in for DirDiffer to consider it. At least one value must belong in this category or the parse fails.\r\n"
		"// If multiple values belong to this category, each subsequent value overwrites the previous, with the last being the eventual final value.\r\n"
		"// Files in the root folder have depth 0.\r\n"
		"<min depth>\r\n"
		"2\r\n"
		"\r\n"
		"// The email report sender that will be specified in the email headers. At least one value must belong in this category or the parse fails.\r\n"
		"// If multiple values belong to this category, each subsequent value overwrites the previous, with the last being the eventual final value.\r\n"
		"// Values in this category must be valid email addresses.\r\n"
		"<email from>\r\n"
		"sender@domain.com\r\n"
		"\r\n"
		"// The email report primary recipient that will be specified in the email headers, and have the email addressed to them. At least one value must belong in this category or the parse fails.\r\n"
		"// If multiple values belong to this category, each subsequent value overwrites the previous, with the last being the eventual final value.\r\n"
		"// Values in this category must be valid email addresses.\r\n"
		"<email to>\r\n"
		"primary_recipient@domain.com\r\n"
		"\r\n"
		"// Cc email addresses that should also receive the email report. The primary recipient needs not be specified here. This category is optional.\r\n"
		"// If multiple values belong to this category, they will all be in the Cc list.\r\n"
		"// Duplicates are ignored.\r\n"
		"// Values in this category must be valid email addresses.\r\n"
		"<email cc>\r\n"
		"cc1@domain.com\r\n"
		"cc2@domain.com\r\n"
		"cc3@domain.com\r\n"
		"\r\n"
		"// Email report subject. This category is optional.\r\n"
		"// If multiple values belong to this category, each subsequent value overwrites the previous, with the last being the eventual final value.\r\n"
		"// Values in this category are simply strings. UTF-8 is supported.\r\n"
		"<email subject>\r\n"
		"subject\r\n"
		"\r\n";
	
}